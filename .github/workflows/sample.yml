name: 🚀 Release Pipeline - Complete Deployment Workflow
run-name: Release

# 📋 WORKFLOW OVERVIEW:
# This automated pipeline handles end-to-end release management with the following stages:
# 1. Repository sync (back-merge)  2. Version tagging  3. Documentation  
# 4. Environment promotion  5. Project management  6. Production deployment
#
# ⚠️  IMPORTANT: Production deployment will affect live users!
# 💡 TIP: You can skip individual steps by unchecking them below

on:
  workflow_dispatch:
    inputs:
      # ═══════════════════════════════════════════════════════════════
      # 🔧 REPOSITORY MANAGEMENT
      # ═══════════════════════════════════════════════════════════════
      back_merge:
        description: |
          🔄 **Back Merge** (main → develop)
          Synchronizes main branch changes back to develop branch.
          ✅ Recommended for: hotfix releases, critical patches
          ⏱️ Duration: ~2-3 minutes
        required: true
        default: true
        type: boolean
      
      # ═══════════════════════════════════════════════════════════════
      # 🏷️ VERSION CONTROL & DOCUMENTATION
      # ═══════════════════════════════════════════════════════════════
      create_tag:
        description: |
          🏷️ **Create Release Tag**
          Generates semantic version tag (vX.X.X) and creates GitHub release.
          ✅ Includes: release notes, binary artifacts, changelog
          ⏱️ Duration: ~1-2 minutes
        required: true
        default: true
        type: boolean
      
      add_changelog:
        description: |
          📝 **Generate Changelog**
          Auto-creates CHANGELOG.md with commit history and release notes.
          ✅ Includes: features, bugfixes, breaking changes, contributors
          ⏱️ Duration: ~1 minute
        required: true
        default: true
        type: boolean
      
      # ═══════════════════════════════════════════════════════════════
      # 🌐 ENVIRONMENT PROMOTION
      # ═══════════════════════════════════════════════════════════════
      forward_merge_from_develop_to_staging:
        description: |
          ➡️ **Deploy to Staging** (develop → staging)
          Promotes latest features to staging environment for QA testing.
          ✅ Safe to run: staging environment, no user impact
          ⏱️ Duration: ~3-5 minutes
        required: true
        default: true
        type: boolean
      
      # ═══════════════════════════════════════════════════════════════
      # 📊 PROJECT MANAGEMENT INTEGRATION
      # ═══════════════════════════════════════════════════════════════
      next_release_jira_release_version:
        description: |
          📊 **Update JIRA Release**
          Updates JIRA project with new release version and closes sprint.
          ✅ Includes: version update, sprint closure, ticket transitions
          ⏱️ Duration: ~2 minutes
        required: true
        default: true
        type: boolean
      
      next_release_app_version:
        description: |
          🔢 **Bump App Version**
          Increments version in package.json/pom.xml for next development cycle.
          ✅ Prepares: next sprint, development branch versioning
          ⏱️ Duration: ~1 minute
        required: true
        default: true
        type: boolean
      
      # ═══════════════════════════════════════════════════════════════
      # 🚨 PRODUCTION DEPLOYMENT - LIVE IMPACT
      # ═══════════════════════════════════════════════════════════════
      forward_merge_from_staging_to_production:
        description: |
          🚀 **DEPLOY TO PRODUCTION** (staging → production)
          ⚠️  CRITICAL: This deploys to LIVE production environment!
          ✅ Affects: real users, live system, production database
          ⏱️ Duration: ~5-10 minutes | 🔔 Notifications: Slack, email
        required: true
        default: true
        type: boolean

      branch_master:
        required: true
        default: "master"
        type: string
      branch_staging:
        required: true
        default: "staging"
        type: string
      test_tag:
        required: false
        type: string

# Set environment variables that can be used across all jobs  
env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.9'
  BRANCH_MASTER: ${{ inputs.branch_master }}
  BRANCH_STAGING: ${{ inputs.branch_staging }}
  BRANCH_PRODUCTION: ${{ inputs.branch_production }}
  TEST_TAG: ${{ inputs.test_tag }}

jobs:

  back_merge:
    if: inputs.back_merge == true
    name: back_merge
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Run Script
      shell: bash
      run: |
        ./script.sh

  create_tag:
    if: inputs.create_tag == true && always() && (needs.back_merge.result == 'success' || inputs.back_merge == false)
    needs: back_merge
    name: create_tag
    runs-on: ubuntu-latest  
    steps:
    - name: Dummy
      shell: bash
      run: |
        echo "Create Tag"

  add_changelog:
    if: inputs.add_changelog == true && always() && (needs.create_tag.result == 'success' || inputs.create_tag == false)
    needs: create_tag
    name: add_changelog
    runs-on: ubuntu-latest
    steps:
    - name: Dummy
      shell: bash
      run: |
        echo "Add Changelog"

  forward_merge_from_develop_to_staging:
    if: inputs.forward_merge_from_develop_to_staging == true && always() && (needs.add_changelog.result == 'success' || inputs.add_changelog == false)
    needs: add_changelog
    name: forward_merge_from_develop_to_staging
    runs-on: ubuntu-latest
    steps:
    - name: Dummy
      shell: bash
      run: |
        echo "Forward Merge from Develop to Staging"

  next_release_jira_release_version:
    if: inputs.next_release_jira_release_version == true && always() && (needs.forward_merge_from_develop_to_staging.result == 'success' || inputs.forward_merge_from_develop_to_staging == false)
    needs: forward_merge_from_develop_to_staging
    name: next_release_jira_release_version
    runs-on: ubuntu-latest
    steps:
    - name: Dummy
      shell: bash
      run: |
        echo "Next Release Jira Release Version"

  next_release_app_version:
    if: inputs.next_release_app_version == true && always() && (needs.next_release_jira_release_version.result == 'success' || inputs.next_release_jira_release_version == false)
    needs: next_release_jira_release_version
    name: next_release_app_version
    runs-on: ubuntu-latest
    steps:
    - name: Dummy
      shell: bash
      run: |
        echo "Next Release App Version"
      
  forward_merge_from_staging_to_production:
    if: inputs.forward_merge_from_staging_to_production == true && always() && (needs.next_release_app_version.result == 'success' || inputs.next_release_app_version == false)
    needs: next_release_app_version
    name: forward_merge_from_staging_to_production
    runs-on: ubuntu-latest
    steps:
    - name: Dummy
      shell: bash
      run: |
        echo "Forward Merge from Staging to Production"
