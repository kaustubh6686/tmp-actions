name: Sample Workflow

on:
  workflow_dispatch:
    inputs:
      back_merge:
        description: 'Perform back merge operation from main to develop branch'
        required: true
        default: true
        type: boolean
      create_tag:
        description: 'Create a new release tag based on version'
        required: true
        default: true
        type: boolean
      add_changelog:
        description: 'Generate and add changelog entries for the release'
        required: true
        default: true
        type: boolean
      forward_merge_from_develop_to_staging:
        description: 'Merge changes from develop branch to staging branch'
        required: true
        default: true
        type: boolean
      next_release_jira_release_version:
        description: 'Update JIRA with the next release version information'
        required: true
        default: true
        type: boolean
      next_release_app_version:
        description: 'Bump application version for the next release cycle'
        required: true
        default: true
        type: boolean
      forward_merge_from_staging_to_production:
        description: 'Merge changes from staging branch to production branch'
        required: true
        default: true
        type: boolean
        

# Set environment variables that can be used across all jobs  
env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.9'

jobs:

  back_merge:
    if: inputs.back_merge == true
    name: back_merge
    runs-on: ubuntu-latest
    steps:
    - name: Dummy
      shell: bash
      run: |
        echo "Back Merge"

  create_tag:
    if: inputs.create_tag == true && always() && (needs.back_merge.result == 'success' || inputs.back_merge == false)
    needs: back_merge
    name: create_tag
    runs-on: ubuntu-latest  
    steps:
    - name: Dummy
      shell: bash
      run: |
        echo "Create Tag"

  add_changelog:
    if: inputs.add_changelog == true && always() && (needs.create_tag.result == 'success' || inputs.create_tag == false)
    needs: create_tag
    name: add_changelog
    runs-on: ubuntu-latest
    steps:
    - name: Dummy
      shell: bash
      run: |
        echo "Add Changelog"

  forward_merge_from_develop_to_staging:
    if: inputs.forward_merge_from_develop_to_staging == true && always() && (needs.add_changelog.result == 'success' || inputs.add_changelog == false)
    needs: add_changelog
    name: forward_merge_from_develop_to_staging
    runs-on: ubuntu-latest
    steps:
    - name: Dummy
      shell: bash
      run: |
        echo "Forward Merge from Develop to Staging"

  next_release_jira_release_version:
    if: inputs.next_release_jira_release_version == true && always() && (needs.forward_merge_from_develop_to_staging.result == 'success' || inputs.forward_merge_from_develop_to_staging == false)
    needs: forward_merge_from_develop_to_staging
    name: next_release_jira_release_version
    runs-on: ubuntu-latest
    steps:
    - name: Dummy
      shell: bash
      run: |
        echo "Next Release Jira Release Version"

  next_release_app_version:
    if: inputs.next_release_app_version == true && always() && (needs.next_release_jira_release_version.result == 'success' || inputs.next_release_jira_release_version == false)
    needs: next_release_jira_release_version
    name: next_release_app_version
    runs-on: ubuntu-latest
    steps:
    - name: Dummy
      shell: bash
      run: |
        echo "Next Release App Version"
      
  forward_merge_from_staging_to_production:
    if: inputs.forward_merge_from_staging_to_production == true && always() && (needs.next_release_app_version.result == 'success' || inputs.next_release_app_version == false)
    needs: next_release_app_version
    name: forward_merge_from_staging_to_production
    runs-on: ubuntu-latest
    steps:
    - name: Dummy
      shell: bash
      run: |
        echo "Forward Merge from Staging to Production"
